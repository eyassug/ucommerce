@using UCommerce.Api
@functions{
    public static bool? AddToBasket(string addToBasketKey, string quantityKey, UCommerce.EntitiesV2.Product variant)
    {
        var request = HttpContext.Current.Request;

        if (request.Form.AllKeys.All(x => x != addToBasketKey))
        {
            return null;
        }

        if (variant == null)
        {
            return false;
        }

        var quantity = Convert.ToInt32(request.Form[quantityKey]);
        TransactionLibrary.AddToBasket(quantity, variant.Sku, variant.VariantSku);
        TransactionLibrary.ExecuteBasketPipeline();
        var returnUrl = request.RawUrl;

        if (returnUrl.Contains("item-added"))
            HttpContext.Current.Response.Redirect(returnUrl);

        if (returnUrl.Contains("?"))
            HttpContext.Current.Response.Redirect(string.Format("{0}&item-added=true", returnUrl));

        HttpContext.Current.Response.Redirect(string.Format("{0}?item-added=true", returnUrl));
        return true;
    }

    public static bool? AddVoucher(string addVoucherKey, string voucherKey)
    {
        var request = HttpContext.Current.Request;

        if (request.Form.AllKeys.All(x => x != addVoucherKey))
        {
            return null;
        }

        if (request.Form.AllKeys.All(x => x != voucherKey))
        {
            return false;
        }

        var code = request.Form[voucherKey];
        if (string.IsNullOrWhiteSpace(code))
        {
            return false;
        }

        MarketingLibrary.AddVoucher(code);
        TransactionLibrary.ExecuteBasketPipeline();
        return true;
    }

    public static bool? RemoveItem(string removeItemKey)
    {
        var request = HttpContext.Current.Request;

        if (!request.Form.AllKeys.Any(x => x.Equals(removeItemKey)))
        {
            return null;
        }

        int orderLineId;

        if (!int.TryParse(request.Form[removeItemKey], out orderLineId))
        {
            return false;
        }

        TransactionLibrary.UpdateLineItem(orderLineId, 0);
        TransactionLibrary.ExecuteBasketPipeline();
        HttpContext.Current.Response.Redirect(request.RawUrl);

        return true;
    }

    public static bool? UpdateCartLines(string updateItemKey, string quantityKey, UCommerce.EntitiesV2.PurchaseOrder basket)
    {
        var request = HttpContext.Current.Request;

        if (!request.Form.AllKeys.Any(x => x.Equals(updateItemKey)))
        {
            return null;
        }

        // NOTE: This could be made more efficient by checking whether the quantities are different
        foreach (var orderLineId in basket.OrderLines.Select(x => x.OrderLineId).ToList())
        {
            int newQuantity;
            if (int.TryParse(request.Form[quantityKey + orderLineId], out newQuantity))
            {
                TransactionLibrary.UpdateLineItem(orderLineId, newQuantity);
            }
        }

        //// NOTE: If you are expecting a lot of changes each time, this would be better a better way to handle the updates
        // var orderLines = basket.OrderLines.ToList();
        // foreach (var orderLine in orderLines)
        // {
        //     int newQuantity;
             
        //     if (!int.TryParse(request.Form[quantityKey + orderLine], out newQuantity)) 
        //         continue;
             
        //     orderLine.Quantity = newQuantity;
             
        //     if (newQuantity == 0)
        //         basket.RemoveOrderLine(orderLine);
        // }

        foreach (var line in basket.OrderLines.Where(l => l.Quantity == 0))
        {
            basket.RemoveOrderLine(line);
        }

        TransactionLibrary.ExecuteBasketPipeline();
        return true;
    }

}
