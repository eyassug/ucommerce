@using UCommerce.Catalog
@using UCommerce.EntitiesV2
@using UCommerce.Marketing
@using UCommerce.Transactions
@{
    var basket = TransactionLibrary.GetBasket(true).PurchaseOrder;

    if (HttpContext.Current.Request.HttpMethod == "POST" && HttpContext.Current.Request.Form.AllKeys.Any(x => x.StartsWith("addVoucher")))
    {
        var code = HttpContext.Current.Request.Form["voucherCode"];
        if (!string.IsNullOrWhiteSpace(code))
        {
            MarketingLibrary.AddVoucher(code);
            TransactionLibrary.ExecuteBasketPipeline();
            HttpContext.Current.Response.Redirect(HttpContext.Current.Request.RawUrl);
        }
    }
    if (HttpContext.Current.Request.HttpMethod == "POST" && HttpContext.Current.Request.Form.AllKeys.Any(x => x.StartsWith("updateBasket")))
    {
        foreach (var orderLineId in basket.OrderLines.Select(x => x.OrderLineId).ToList())
        {
            int newQuantity;
            if (int.TryParse(HttpContext.Current.Request.Form["quantityInput_" + orderLineId], out newQuantity))
            {
                TransactionLibrary.UpdateLineItem(orderLineId, newQuantity);
            }
        }


        TransactionLibrary.ExecuteBasketPipeline();
        if (HttpContext.Current.Request.Form.AllKeys.Any(x => x == "updateBasketAndContinue"))
        {
            HttpContext.Current.Response.Redirect("Address.aspx");
        }
        else
        {
            HttpContext.Current.Response.Redirect(HttpContext.Current.Request.RawUrl);
        }

    }

}

<form method="post">
    <div class="row-fluid well">
    
        <table class="table  table-condensed">
            <thead>
                <tr>
                    <th>Item no.</th>
                    <th>Description</th>
                    <th>Item price</th>
                    <th>VAT</th>
                    <th>Quantity</th>
                    <th>Total</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var lineItem in basket.OrderLines)
                {
                
                    <tr>
                        <td>
                            @lineItem.Sku
                        </td>
                        <td>
                            @lineItem.ProductName
                        </td>
                        <td>
                            @if (lineItem.UnitDiscount.HasValue && lineItem.UnitDiscount > 0)
                            {
                                <span style="text-decoration:line-through">
                                    @CatalogLibrary.FormatCurrency(lineItem.Price)    
                                </span>
                                @CatalogLibrary.FormatCurrency(lineItem.Price - lineItem.UnitDiscount)    
                            }
                            else
                            {
                                @CatalogLibrary.FormatCurrency(lineItem.Price)    
                            }
                        </td>
                        <td>
                            @CatalogLibrary.FormatCurrency(lineItem.VAT)
                        </td>
                        <td>
                            <input type="text" class="input-mini" name="quantityInput_@(lineItem.OrderLineId)" value="@lineItem.Quantity" />
                        </td>
                        <td>
                            @CatalogLibrary.FormatCurrency(lineItem.Total)
                        </td>
                    </tr>
                }
                <tr>
                    <td colspan="5">Sub total:</td>
                    <td>
                        @CatalogLibrary.FormatCurrency(basket.SubTotal)
                    </td>
                </tr>
                <tr>
                    <td colspan="5">VAT:</td>
                    <td>
                        @CatalogLibrary.FormatCurrency(basket.VAT)
                    </td>
                </tr>
                <tr>
                    <td colspan="5">Order discounts:</td>
                    <td>
                        -@CatalogLibrary.FormatCurrency(basket.Discount)
                    </td>
                </tr>
                
                <tr>
                    <td colspan="5">Order total:</td>
                    <td >
                        @CatalogLibrary.FormatCurrency(basket.OrderTotal)
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <div class="row-fluid well">
        <input type="text" name="voucherCode"></input>
        <input name="addVoucher" class="btn" type="submit" value="Add voucher"/>
    </div>
    <input name="updateBasket" class="btn" type="submit" value="Update cart"/>
    
    <input name="updateBasketAndContinue" class="btn btn-primary" type="submit" value="Next"/>
		</form>