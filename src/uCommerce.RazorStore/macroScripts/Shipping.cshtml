@using UCommerce.EntitiesV2
@using UCommerce.Api
@{
    if (HttpContext.Current.Request.HttpMethod == "POST" && HttpContext.Current.Request.Form.AllKeys.Any(x => x == "update-shipment"))
    {
        int newShipmentId;
        if(int.TryParse(HttpContext.Current.Request.Form["shipping-method"], out newShipmentId))
        {
            TransactionLibrary.CreateShipment(newShipmentId, overwriteExisting: true);
            TransactionLibrary.ExecuteBasketPipeline();
            HttpContext.Current.Response.Redirect("Payment.aspx");
        }
        
    }
    
    var basket = TransactionLibrary.GetBasket().PurchaseOrder;
    var currentShippingMethod = TransactionLibrary.GetShippingMethod();
}
@helper RenderShippingMethodLabel(ShippingMethod shippingMethod, PurchaseOrder basket)
{
    var price = @shippingMethod.GetPriceForCurrency(basket.BillingCurrency);
    var formattedPrice = TransactionLibrary.FormatCurrency(price == null ? 0 : price.Price);
    
    @shippingMethod.Name <text>(</text>@formattedPrice<text>)</text>
    
}
<form  method="post">
    <div class="row-fluid well" >
        <div class="span6">
            <h3>Shipping method</h3>
            <br/>
            @foreach (var shippingMethod in TransactionLibrary.GetShippingMethods())
            {
                <label class="radio">
                    <input type="radio" name="shipping-method"  @(shippingMethod.Equals(currentShippingMethod) ? "checked" : string.Empty) 
                        value="@shippingMethod.ShippingMethodId" />@RenderShippingMethodLabel(shippingMethod, basket)</label>
            }

        </div>
    </div>
    <input name="update-shipment" class="btn btn-primary" type="submit" value="Next"/>
</form>